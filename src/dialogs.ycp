/**
 * File:	include/iscsi-client/dialogs.ycp
 * Package:	Configuration of iscsi-client
 * Summary:	Dialogs definitions
 * Authors:	Michal Zugec <mzugec@suse.cz>
 *
 * $Id: dialogs.ycp 13879 2004-02-05 11:29:30Z msvec $
 */

{

textdomain "iscsi-client";

import "Label";
import "Wizard";
import "IscsiClient";
import "CWMServiceStart";
import "CWMFirewallInterfaces";
import "CWMTab";
import "CWM";
import "Stage";
//import "iscsi-client-widgets";

include "iscsi-client/helps.ycp";
include "iscsi-client/widgets.ycp";
//void initConnectedTable(string key);
string current_tab = "general";

map<string, map <string, any> > widgets = $[
            "auto_start_up" : CWMServiceStart::CreateAutoStartWidget ($[
                "get_service_auto_start" : IscsiClient::GetStartService,
                "set_service_auto_start" : IscsiClient::SetStartService,
                // radio button (starting SLP service - option 1)
                "start_auto_button" : _("When &Booting"),
                // radio button (starting SLP service - option 2)
                "start_manual_button" : _("&Manually"),
                "help" : sformat (CWMServiceStart::AutoStartHelpTemplate (),
                    // part of help text, used to describe radiobuttons (matching starting SLP service but without "&")
                    _("When Booting"),
                    // part of help text, used to describe radiobuttons (matching starting SLP service but without "&")
                    _("Manually")
                ),
            ]),

    "firewall" : CWMFirewallInterfaces::CreateOpenFirewallWidget ($[
        "services" : [ "slp-daemon" ],
        "display_details" : true,
      ]),
       "connected_table" : $[
		"widget" : `custom,
		"custom_widget"	:
		 `VBox(
		  `Table(`id(`connected),
			`header(_("Portal Address"), _("Target Name"), _("Startup")),
			[]
			),
		  `Left(`HBox(
			`PushButton(`id(`add), _("Add")),
			`PushButton(`id(`del), _("Delete")),
			`PushButton(`id(`toggle), _("Toggle Startup"))
			))
		  ),
		"init"	: initConnectedTable,
		"handle" : handleConnectedTable
		],
       "discovered_table" : $[
		"widget" : `custom,
		"custom_widget"	:
		 `VBox(
		  `Table(`id(`discovered),
			`header(_("Portal Address"), _("Target Name"), _("Connected")),
			[]
			),
		  `Left(`HBox(
			`PushButton(_("Discovery")),
			`PushButton(_("Connect"))

			))
		  ),
		"init" : initDiscoveredTable
		],
       "targets_table" : $[
		"widget" : `custom,
		"custom_widget"	:
		 `VBox(
		  `Table(`id(`targets),
			`header(_("Portal Address"), _("Target Name"), _("Connected")),
			[]
			),
		  `Left(`HBox(
			`PushButton(_("Discovery")),
			`PushButton(_("Connect"))

			))
		  ),
		"init" : initTargetTable
		],
	"discovery_auth" : $[
               "widget" : `custom,
                "custom_widget" :
                 `VBox(
			`Left( `CheckBox(`id(`auth_none),`opt(`notify), _("None Autentification")) ),
			`VSpacing(2),
			`Left( `CheckBox(`id(`auth_in),`opt(`notify), _("Incoming Autentification"), true) ),
			`HBox(
				`TextEntry(`id(`user_in), _("Username")), `TextEntry(`id(`pass_in), _("Password"))
			  ),
			`VSpacing(2),
			`Left( `CheckBox(`id(`auth_out),`opt(`notify), _("Outgoing Autentification"), true) ),
			`HBox(
				`TextEntry(`id(`user_out), _("Username")), `TextEntry(`id(`pass_out), _("Password"))
			  )
                  ),
		"handle" : handleDiscAuth,
//		"validate_type" : `function,
//		"validate_function" : validateDiscAuth
	],
	"server_location" : $[
		"widget" : `custom,
		"custom_widget" : `HBox(
		`TextEntry(`id(`hostname), _("IP Address")),
                `IntField(`id(`port), _("Port"), 0,65535,3260)
		),
                   "validate_type" : `function,
                   "validate_function" : validateServerLocation
	]
    ];


map tabs_descr = $[
        "general":$[
         "header"       : _("Global"),
         "contents"     :
                          `VBox(
                          `VStretch(),
                          `HBox(
                           `HStretch(),
                           `HSpacing (1),
                            `VBox(
                                "auto_start_up",
                                `VSpacing (2),
                                "firewall",
                                `VSpacing (2)
                                ),
                           `HSpacing (1),
                           `HStretch()
                              ),
                          `VStretch()
                        ),
         "widget_names" : [ "auto_start_up", "firewall" ]
        ],

        "client":$[
         "header"       : _("Connected Targets"),
         "contents"     :
                          `VBox(
                          `VStretch(),
                          `HBox(
                           `HStretch(),
                           `HSpacing (1),
                            `VBox(
                                "connected_table",
                                `VSpacing (2)
                                ),
                           `HSpacing (1),
                           `HStretch()
                               ),
                          `VStretch()
                        ),
         "widget_names" : [ "connected_table" ]
        ],
        "discovered":$[
         "header"       : _("Discovered Targets"),
         "contents"     :
                          `VBox(
                          `VStretch(),
                          `HBox(
                           `HStretch(),
                           `HSpacing (1),
                            `VBox(
                                "discovered_table",
                                `VSpacing (2)
                                ),
                           `HSpacing (1),
                           `HStretch()
                               ),
                          `VStretch()
                        ),
         "widget_names" : [ "discovered_table" ]
        ]
      ];




any GlobalDialog() {
    string caption = _("iSCSI Client Overview");

    map widget_descr = $[
	"tab": CWMTab::CreateWidget($[
            "tab_order": (Stage::initial()) ? ["client"] : [ "general", "client", "discovered" ],
            "tabs": tabs_descr,
            "widget_descr": widgets,
            "initial_tab" : (Stage::initial()) ? "client" : current_tab,
            "tab_help" : _("<h1>iSCSI Client</h1>"),
        ]),
    ];


    term contents = `VBox( "tab"/*, `VStretch ()*/);

    list<map <string, any> > w = CWM::CreateWidgets (["tab"], (map <string, map <string, any> >)widget_descr);
    string help = CWM::MergeHelps(w);
    contents = CWM::PrepareDialog(contents, w);

    Wizard::SetContentsButtons(caption, contents, help, Label::NextButton (), Label::FinishButton ());
    Wizard::HideBackButton();

    symbol ret = CWM::Run(w, $[`abort:ReallyAbort ]);

    return ret;

}

any DiscAuthDialog (){
     current_tab = "client";
    string caption = _("iSCSI Client Discovery");
    list<map <string, any> > w = CWM::CreateWidgets (["server_location", "discovery_auth"],
								(map <string, map <string, any> >)widgets);
        term contents =
                          `VBox(
                          `VStretch(),
                          `HBox(
                           `HStretch(),
                           `HSpacing (1),
                            `VBox(
                                w[0, "widget"]:`VSpacing (1),
                                `VSpacing (2),
                                w[1, "widget"]:`VSpacing (1),
                                `VSpacing (2)
                                ),
                           `HSpacing (1),
                           `HStretch()
                               ),
                          `VStretch()
                        );

    string help = CWM::MergeHelps(w);
    contents = CWM::PrepareDialog(contents, w);
    Wizard::SetContentsButtons(caption, contents, HELPS["discovery"]:"",
            Label::BackButton(), Label::NextButton());

    any ret = CWM::Run(w, $[`abort:ReallyAbort ]);
    return ret;
}


any TargetsDialog(){
     current_tab = "client";
    string caption = _("iSCSI Client Discovery");
    list<map <string, any> > w = CWM::CreateWidgets (["targets_table"], (map <string, map <string, any> >)widgets);
        term contents =
                          `VBox(
                          `VStretch(),
                          `HBox(
                           `HStretch(),
                           `HSpacing (1),
                            `VBox(
                                w[0, "widget"]:`VSpacing (1),
				`VSpacing (2)
                                ),
                           `HSpacing (1),
                           `HStretch()
                               ),
                          `VStretch()
                        );

    string help = CWM::MergeHelps(w);
    contents = CWM::PrepareDialog(contents, w);
    Wizard::SetContentsButtons(caption, contents, HELPS["discovery"]:"",
            Label::BackButton(), Label::NextButton());

    any ret = CWM::Run(w, $[`abort:ReallyAbort ]);
    return ret;

}

/* EOF */
}
